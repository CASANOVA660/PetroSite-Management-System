===========================================
ITALFLUID PETROCONNECT - PROJECT DOCUMENTATION
===========================================

Table of Contents:
1. Project Overview
2. Technology Stack
3. Project Architecture
4. Features & Scenarios
5. Project Structure
6. Running the Project
7. Docker Setup

-------------------------------------------
1. PROJECT OVERVIEW
-------------------------------------------
Italfluid Petroconnect is a comprehensive web application designed to manage petroleum-related operations. The application provides a modern, user-friendly interface with secure authentication and real-time data management capabilities.

-------------------------------------------
2. TECHNOLOGY STACK
-------------------------------------------

Frontend:
- React.js: Modern user interface framework
- Tailwind CSS: Utility-first CSS framework for styling
- Redux: State management for the application
- Socket.io-client: Real-time communication with the backend

Backend:
- Node.js & Express: Server-side application framework
- MongoDB: Database for storing application data
- Redis: Caching and session management
- Socket.io: Real-time bi-directional communication

Development & Deployment:
- Docker: Containerization of the application
- Docker Compose: Multi-container orchestration
- Nginx: Web server for serving frontend assets

-------------------------------------------
3. PROJECT ARCHITECTURE
-------------------------------------------

The project follows a microservices architecture with:

1. Frontend Service (React):
   - Single Page Application (SPA)
   - Responsive design for all devices
   - Theme switching (Light/Dark mode)
   - Protected routes for authenticated users

2. Backend Service (Node.js):
   - RESTful API endpoints
   - JWT authentication
   - Real-time updates using WebSockets
   - File upload handling

3. Database Services:
   - MongoDB: Main database
   - Redis: Caching and session storage

-------------------------------------------
4. FEATURES & SCENARIOS
-------------------------------------------

1. User Authentication:
   Scenario: "As a user, I want to securely access my account"
   - Sign in with email/password
   - Sign up for new account
   - Password recovery via email
   - Remember me functionality
   - Secure session management

2. User Profile Management:
   Scenario: "As a user, I want to manage my profile"
   - View profile information
   - Update personal details
   - Change password
   - View activity history

3. User Management (Admin):
   Scenario: "As an admin, I want to manage system users"
   - View all users
   - Create new users
   - Update user roles
   - Disable/Enable user accounts

4. Dashboard:
   Scenario: "As a user, I want to see important information at a glance"
   - Overview of key metrics
   - Real-time updates
   - Interactive charts and graphs
   - Quick access to common functions

-------------------------------------------
5. PROJECT STRUCTURE
-------------------------------------------

Frontend Structure (petroleum-front/):
├── src/
│   ├── components/     # Reusable UI components
│   ├── pages/         # Page components
│   ├── store/         # Redux store configuration
│   ├── layout/        # Layout components
│   ├── utils/         # Utility functions
│   └── assets/        # Static assets

Backend Structure (petroleum-backend/):
├── config/           # Configuration files
├── modules/          # Business logic modules
├── middleware/       # Express middleware
├── utils/           # Utility functions
└── server.js        # Main application file

-------------------------------------------
6. RUNNING THE PROJECT
-------------------------------------------

Without Docker (Development):

1. Frontend Setup:
   ```
   cd petroleum-front
   npm install
   npm run dev
   ```
   Access at: http://localhost:5173

2. Backend Setup:
   ```
   cd petroleum-backend
   npm install
   npm run dev
   ```
   Access at: http://localhost:3000

3. Requirements:
   - Node.js v18 or higher
   - MongoDB running locally
   - Redis running locally

With Docker (Recommended):

1. Full Stack Development:
   ```
   docker-compose up
   ```
   This starts:
   - Frontend: http://localhost:5173
   - Backend: http://localhost:3000
   - MongoDB: localhost:27017
   - Redis: localhost:6379

2. Stop All Services:
   ```
   docker-compose down
   ```

3. Rebuild and Start:
   ```
   docker-compose up --build
   ```

Requirements:
- Docker
- Docker Compose

-------------------------------------------
7. DOCKER SETUP
-------------------------------------------

The project uses Docker for containerization with:

1. Development Environment:
   - Hot-reloading enabled
   - Volume mounting for live code updates
   - Development dependencies included

2. Production Environment:
   - Optimized builds
   - Minimal dependencies
   - Security best practices
   - Health checks implemented

3. Data Persistence:
   - MongoDB volume: mongodb_data
   - Redis volume: redis_data

4. Network:
   - Internal network: petroleum-network
   - Isolated container communication

Note: Make sure no other services are running on ports 5173, 3000, 27017, or 6379 before starting the containers.

===========================================
End of Documentation
=========================================== 